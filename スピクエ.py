# -*- coding: utf-8 -*-
"""スピクエ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KCQ2INj2xTpe2YxxqfphD-bzsSKjtYeg

## Read Me

このファイルは目指せ精霊王！スピリットキングクエストのスキルCT比較用のコードファイルです．ローカルでの実行ではない為，あなたの環境には一切変更を与えないので安心してください．<br>

事前準備はこのサイトを開いたときに**最初だけ実行**し，以降は実行しないでください．(しても大丈夫ですが意味ないです)<br>

## 事前準備

事前準備にはスキル時間重複比較をするための日本語フォントの表示セットアップと実行用関数及びスキルリストが含まれています
"""

# IPAexゴシックフォントをダウンロードして有効化（Colab専用）
!wget -q https://moji.or.jp/wp-content/ipafont/IPAexfont/ipaexg00301.zip
!unzip -o ipaexg00301.zip
!mkdir -p ~/.fonts
!mv ipaexg00301/*.ttf ~/.fonts/
!fc-cache -fv

# フォントを明示的にMatplotlibに登録
from matplotlib.font_manager import FontProperties
font_path = "/root/.fonts/ipaexg.ttf"
font_prop = FontProperties(fname=font_path)

skills = [
    {"Name": "ワンワンボンバー", "CT": 3.45, "Effect Time": 2.0},
    {"Name": "ブリザード", "CT": 4.5, "Effect Time": None},  # 即時型
    {"Name": "プロテクション", "CT": 3.9, "Effect Time": 1.5},
    {"Name": "ラグナロク", "CT": 3.0, "Effect Time": None},
    {"Name": "マンドレイク爆弾", "CT": 4.85, "Effect Time": 2.5},
    {"Name": "ピアシングソード", "CT": 3.25, "Effect Time": None},
    {"Name": "自然の力", "CT": 3.75, "Effect Time": 2},
    {"Name": "ポイズンフィールド", "CT": 4.95, "Effect Time": 2.5},
    {"Name": "地獄火", "CT": 4.5, "Effect Time": None},
    {"Name": "精霊地震", "CT": 3.5, "Effect Time": None},
    {"Name": "炎の鞭", "CT": 3.95, "Effect Time": 2.0},
    {"Name": "亡者の堕落", "CT": 3.0, "Effect Time": None},
    {"Name": "キングスライム召喚", "CT": 3.35, "Effect Time": None},
    {"Name": "ドラゴンスレイヤーランス", "CT": 3.75, "Effect Time": 2},
    {"Name": "猫の足跡", "CT": 5, "Effect Time": None},
    {"Name": "月光斬り", "CT": 4.0, "Effect Time": None},
    {"Name": "ゴッドフィスト", "CT": 4.5, "Effect Time": None},
    {"Name": "火山爆発", "CT": 4.45, "Effect Time": 2.5},
    {"Name": "デスサイズ", "CT": 4.7, "Effect Time": 2.5},
    {"Name": "ベヒモス召喚", "CT": 3.9, "Effect Time": None},
    {"Name": "ドラゴンブレス", "CT": 3.85, "Effect Time": None},
    {"Name": "フェニックス召喚", "CT": 4.3, "Effect Time": 2.0},
    {"Name": "アルマゲドン", "CT": 4.75, "Effect Time": None}
]

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.colors import hsv_to_rgb
import numpy as np

def time_overlap(start1, end1, start2, end2):
    return max(0, min(end1, end2) - max(start1, start2))

def generate_distinct_colors(n):
    hues = np.linspace(0, 1, n + 1)[:-1]
    return [hsv_to_rgb((h, 0.6, 0.9)) for h in hues]

def plot_skills_jp(skills, total_time=30, mode="ranking event"):
    fig, ax = plt.subplots(figsize=(12, 6))
    y_labels = [s["Name"] for s in skills]
    colors = generate_distinct_colors(len(skills))
    effect_ranges = [[] for _ in skills]
    bar_height = 0.3

    # === 即時スキル時間収集（小数丸め） ===
    instant_times = {}

    for i, skill in enumerate(skills):
        ct = float(skill['CT'])
        effect_time = float(skill.get('Effect Time') or 0)
        color = colors[i]
        current_time = 0

        while current_time <= total_time:
            start = current_time + ct if mode == "ranking event" else current_time
            end = start + effect_time
            if start > total_time:
                break

            if effect_time > 0:
                # 通常スキル描画
                ax.add_patch(patches.Rectangle((start, i - bar_height / 2), end - start, bar_height,
                                               color=color, alpha=0.6))
                effect_ranges[i].append((start, end))
            else:
                # 即時スキル記録（keyを丸めて一致処理）
                key = round(start, 2)
                instant_times.setdefault(key, []).append(i)

            current_time += ct

    # === 重複効果バー（赤） ===
    for i in range(len(skills)):
        for j in range(i + 1, len(skills)):
            for si, ei in effect_ranges[i]:
                for sj, ej in effect_ranges[j]:
                    if time_overlap(si, ei, sj, ej):
                        ov_start = max(si, sj)
                        ov_end = min(ei, ej)
                        for y in [i, j]:
                            ax.add_patch(patches.Rectangle((ov_start, y - bar_height / 2), ov_end - ov_start, bar_height,
                                                           color='red', alpha=0.8))

    # === 即時スキル描画（plotで明示Y軸、重複は点線） ===
    for t, indices in instant_times.items():
        for i in indices:
            # 他スキルの効果時間と重複しているかチェック
            overlaps_effect = False
            for j, ranges in enumerate(effect_ranges):
                if j == i:
                    continue
                for start, end in ranges:
                    if start <= t <= end:
                        overlaps_effect = True
                        break
                if overlaps_effect:
                    break

            color = 'red' if len(indices) > 1 else 'blue'
            linestyle = ':' if overlaps_effect else '-'
            ax.plot([t, t], [i - bar_height / 2, i + bar_height / 2],
                    color=color, linestyle=linestyle, linewidth=1.8, alpha=0.9)

    # === 軸とタイトル ===
    ax.set_ylim(-1, len(skills))
    ax.set_xlim(0, total_time)
    ax.set_yticks(range(len(skills)))
    ax.set_yticklabels(y_labels, fontproperties=font_prop)
    ax.set_xlabel("時間（秒）", fontproperties=font_prop)
    ax.set_title(f"スキルCTタイムライン（{mode}）", fontproperties=font_prop)
    ax.grid(axis='x', linestyle='--', alpha=0.6)
    plt.tight_layout()
    plt.show()

    print("📝 スキル情報：")
    for s in skills:
        et = s.get('Effect Time')
        print(f"・{s['Name']}：CT={s['CT']}秒, 効果時間={'即時' if not et else f'{et}秒'}")

"""## スキル/モード選択

このセルはスキルの選択及びモードの選択画面になります．<br>
モード選択では，ranking eventとnormal stageの2つがあります．

*   ranking eventは0秒時点でCTが適用されている状態です
*   normal stageは0秒時点ですべてのスキルが使用した状態です

時間の選択も30秒と40秒の2種類を選択可能です．

スキル選択は複数選択可能です．チェックボックスが青く表示されていれば選択完了です！<br>

効果時間のあるスキルの重複期間はすべて赤く表示されているため，比較を見やすくしたい際は3個程度がおすすめです．
"""

import ipywidgets as widgets
from IPython.display import display

checkboxes = [widgets.Checkbox(value=False, description=s["Name"]) for s in skills]

mode_selector = widgets.ToggleButtons(
    options=['ranking event', 'normal stage'],
    description='モード:'
)
time_selector = widgets.Dropdown(
    options=[30, 40],
    value=30,
    description='時間:'
)

display(mode_selector, time_selector, widgets.Label("スキル選択:"), widgets.VBox(checkboxes))

"""## 描画実行

このセルはスキル選択後に実行してください！<br>
比較結果の画像が出力されます.スキル効果時間のあるスキル同士の重複期間は赤く表示されます．<br>
また、即時型が効果時間のあるスキルの効果時間と重複していた場合は点線で表示されます.それ以外は直線で表示されます.<br>
y軸にはスキル名称，x軸には時間が表示されます．
"""

selected_skills = [
    {**skills[i], "Name": checkboxes[i].description}
    for i in range(len(checkboxes)) if checkboxes[i].value
]

plot_skills_jp(
    skills=selected_skills,
    total_time=time_selector.value,
    mode=mode_selector.value
)